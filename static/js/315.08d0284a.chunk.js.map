{"version":3,"file":"static/js/315.08d0284a.chunk.js","mappings":"yBAGAA,KAAKC,UAAY,YAAsC,IAAD,IAAlCC,KACZC,ECcD,SAAsBC,EAAeC,EAAeC,GAGzD,IAFA,IAAMC,EAAwB,GAErBC,EAAI,EAAGA,EAAIJ,EAAOI,IAAK,CAC9BD,EAAUC,GAAK,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOI,IACzBF,EAAUC,GAAGC,GAAKC,KAAKC,SAAWL,EAAc,EAAI,EAIxD,OAAOC,EDxBMK,CADuC,EAA1BC,EAA0B,EAAvBC,EAAuB,EAApBR,aAIhCN,KAAKe,YAAY,CACfZ,KAAAA,K","sources":["grid-worker.ts","utils/grid-utils.tsx"],"sourcesContent":["import { generateGrid } from './utils';\n\n// eslint-disable-next-line no-restricted-globals\nself.onmessage = ({ data: { x, y, probability } }) => {\n  const grid = generateGrid(x, y, probability);\n\n  // eslint-disable-next-line no-restricted-globals\n  self.postMessage({\n    grid,\n  });\n};\n\nexport {}\n","function getWindowDimensions(): {\n  innerWidth: number,\n  innerHeight: number,\n  headerHeight: number,\n  cellWidth: number,\n  cellHeight: number,\n  gridContainerBorder: number,\n} {\n  return {\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight,\n    headerHeight: window.innerWidth <= 480 ? 120 : 35,\n    cellWidth: 15,\n    cellHeight: 15,\n    gridContainerBorder: 4,\n  };\n}\n\nexport function generateGrid(gridX: number, gridY: number, probability: number): number[][] {\n  const gridItems: number[][] = [];\n\n  for (let i = 0; i < gridX; i++) {\n    gridItems[i] = [];\n    for (let j = 0; j < gridY; j++) {\n      gridItems[i][j] = Math.random() < probability ? 1 : 0;\n    }\n  }\n\n  return gridItems;\n}\n\nexport function calculateVisibleDimensions({ gridSize }: { gridSize: { x: number, y: number } }): { x: number, y: number } {\n  const { innerWidth, innerHeight, headerHeight, cellHeight, cellWidth, gridContainerBorder } = getWindowDimensions();\n  const requiredWidth = gridSize.x * cellWidth + gridContainerBorder;\n  const requiredHeight = gridSize.y * cellHeight + gridContainerBorder;\n\n  return {\n    x: innerWidth < requiredWidth ? innerWidth : requiredWidth + gridContainerBorder,\n    y: innerHeight - headerHeight < requiredHeight ? innerHeight - headerHeight : requiredHeight,\n  };\n}\n\n\nexport function getGridSizeToFitScreen(): { x: number, y: number } {\n  const { innerWidth, innerHeight, headerHeight, cellWidth } = getWindowDimensions();\n  return { x: Math.floor(innerWidth / cellWidth), y: Math.floor((innerHeight - headerHeight) / cellWidth) };\n}\n\n"],"names":["self","onmessage","data","grid","gridX","gridY","probability","gridItems","i","j","Math","random","generateGrid","x","y","postMessage"],"sourceRoot":""}